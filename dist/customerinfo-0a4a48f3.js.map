{"version":3,"file":"customerinfo-0a4a48f3.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/customerinfos/CustomerInfos.tsx"],"sourcesContent":["import React, { Component, ReactNode } from 'react';\nimport { Customer, Cart } from '@bigcommerce/checkout-sdk';\nimport { Fieldset } from '../ui/form';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport Select from \"react-select\";\nimport TextInput from '../ui/form/TextInput';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { withCheckout } from '../checkout';\nimport { Alert, AlertType } from '../ui/alert';\nimport Label from '../ui/form/Label';\n\nexport interface CustomerInfoItems {\n    group_ids: [];\n    label: string;\n    metafieldKey: string;\n    options: [];\n    type: string;\n    placeholder: string;\n}\n\nexport interface CustomerInfoValues {\n    label: string;\n    value: string;\n}\n\nexport interface CustomerInfoData {\n    valid: boolean;\n    entityID: Number;\n}\n\nexport interface CustomerInfoMetaFields {\n    budgeting: CustomerInfoData;\n    program_id: CustomerInfoData;\n    bottler: CustomerInfoData;\n    team_name: CustomerInfoData;\n    assigned_program_id: CustomerInfoData;\n    po_number: CustomerInfoData;\n}\n\nexport interface CustomerInfosProps {\n    infoData: CustomerInfoItems[];\n    infoUpdated?: CustomerInfoMetaFields;\n    budgeting: CustomerInfoValues;\n    program_id: CustomerInfoValues;\n    assigned_program_id: string;\n    bottler: CustomerInfoValues;\n    team_name: CustomerInfoValues;\n    po_number: string;\n    handleInfoChange?: any;\n    handleCustomerInfoUpdate?: any;\n    customer?: Customer;\n    cart?: Cart;\n    assigned_field_display: boolean\n}\n\nexport interface CustomerInfosState {\n    customerGrpId: Number;\n    isLoading: boolean;\n    customerInfoError: boolean;\n}\n\nclass CustomerInfos extends Component<CustomerInfosProps, CustomerInfosState> {\n    constructor(props: CustomerInfosProps) {\n        super(props);\n\n        this.state = {\n            customerGrpId: 0,\n            isLoading: false,\n            customerInfoError: false\n        };\n    }\n\n    componentDidMount(): void {\n        const {\n            customer\n        } = this.props;\n\n        if(customer && customer.customerGroup && customer.customerGroup.id) {\n            this.setState({customerGrpId: customer.customerGroup.id});\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            infoData,\n            handleInfoChange,\n            po_number,\n            budgeting,\n            program_id,\n            bottler,\n            assigned_program_id,\n            assigned_field_display,\n            team_name\n        } = this.props;\n\n        const {\n            customerGrpId,\n            isLoading,\n            customerInfoError\n        } = this.state;\n\n        return (\n            <form\n            className=\"checkout-form\"\n            id=\"checkout-customerInfo-returning\" onSubmit={this.handlesubmit}\n        >\n            <Fieldset>\n                <div className=\"customerInfo-form\">\n                    {customerInfoError && (\n                        <Alert type={AlertType.Error}><TranslatedString id=\"customerInfo.error_message\" /></Alert>\n                    )}\n                    {\n                        infoData.map((infoField, index) => \n                            <>\n                                {\n                                    infoField && infoField.type == \"dropdown\" ?\n                                        <> \n                                            { infoField.group_ids.map((customId, cusIndex) => {\n                                               return  <>\n                                                    { (customId == customerGrpId) &&\n                                                        <div\n                                                            key={index}\n                                                            className={`dynamic-form-field`}\n                                                        >\n                                                            <div className='form-field' key={cusIndex}>\n                                                                <Label\n                                                                    htmlFor={infoField.metafieldKey}\n                                                                >\n                                                                    {infoField.label}\n                                                                </Label>\n                                                                <Select\n                                                                    className='custom-select-box'\n                                                                    classNamePrefix=\"react-select\"         \n                                                                    id={infoField.metafieldKey}\n                                                                    aria-label={infoField.label}\n                                                                    aria-placeholder={infoField.placeholder}\n                                                                    name={infoField.label}\n                                                                    options={infoField.options}\n                                                                    placeholder={infoField.placeholder}\n                                                                    value={infoField.metafieldKey == \"budgeting\" ? budgeting.label != \"\" ? budgeting: infoField.placeholder : (infoField.metafieldKey == \"program_id\" ? program_id.label != \"\" ? program_id: infoField.placeholder : infoField.metafieldKey == \"bottler\" ? bottler.label != \"\" ? bottler: infoField.placeholder : team_name.label != \"\" ? team_name: infoField.placeholder)}\n                                                                    onChange={(value) => (handleInfoChange(infoField.metafieldKey , value))}\n                                                                />\n                                                            </div>\n                                                        </div>\n                                                    }\n                                                </>\n                                            })}\n                                        </>\n                                    :\n                                    <> \n                                        { infoField.group_ids.map((customId) => {\n                                            return  <>\n                                                { (customId == customerGrpId) && ((infoField.metafieldKey != \"assigned_program_id\") || (infoField.metafieldKey == \"assigned_program_id\" && assigned_field_display == true)) &&\n                                                    <div\n                                                        key={index}\n                                                        className={`dynamic-form-field`}\n                                                    >\n                                                        <div className='form-field' key={index + \"1\"}>\n                                                            <Label\n                                                                htmlFor={infoField.metafieldKey}\n                                                            > \n                                                                {infoField.label}\n                                                            </Label>\n                                                            <TextInput\n                                                                id={infoField.metafieldKey}\n                                                                name={infoField.label}\n                                                                onChange={(event) => (handleInfoChange(infoField.metafieldKey , event.target.value))}\n                                                                placeholder={infoField.placeholder ? infoField.placeholder : infoField.label}\n                                                                testId={`${infoField.metafieldKey}-${'text'}`}\n                                                                type={'text'}\n                                                                value={infoField.metafieldKey == \"po_number\" ? po_number : assigned_program_id}\n                                                                additionalClassName={infoField.metafieldKey == \"po_number\" && (budgeting && budgeting.value == '100% BODYARMOR') ? \"input_disabled\" : \"\"}\n                                                            />\n                                                        </div>\n                                                    </div>\n                                                }\n                                            </>\n                                        })}\n                                    </>\n                                }\n                            </>\n                        )\n                    }\n                </div>\n            </Fieldset>\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={customerGrpId == 11 ? team_name.label == \"\" : (po_number == \"\" || budgeting.label == \"\" || program_id.label == \"\" || bottler.label == \"\" || (assigned_field_display == true && assigned_program_id == \"\"))}\n                    id=\"checkout-customerInfo-create\"\n                    isLoading={isLoading}\n                    testId=\"customer-customerInfo-create\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"customerInfo.continue\" />\n                </Button>\n            </div>\n        </form>\n        )\n    }\n\n    private handlesubmit: (event:any) => void = async (event) => {\n        event.preventDefault();\n        const {\n            po_number,\n            budgeting,\n            program_id,\n            bottler,\n            assigned_program_id,\n            assigned_field_display,\n            infoUpdated,\n            team_name,\n            cart,\n            handleCustomerInfoUpdate\n        } = this.props;\n\n        const { customerGrpId } = this.state;\n\n        if(customerGrpId == 11) {\n            if(team_name.label != \"\") {\n                this.setState({isLoading: true});\n\n                if(document.getElementById(\"dealerScript\")) {\n                    let scriptElem:any = document.getElementById(\"dealerScript\");\n                    const bearerToken:any = scriptElem.attributes.store_api.nodeValue;\n                    let cartID = cart?.id || \"\";\n\n                    if(bearerToken && cartID != \"\") {\n                        let budgetData:any = 1;\n                        let program_idData:any = 1;\n                        let bottlerData:any = 1;\n                        let po_numberData:any = 1; \n                        let assigned_program_idData:any = 1;\n                        let team_nameData:any;\n\n                        if(infoUpdated?.team_name.valid == false && team_name) {\n                            team_nameData = await this.createMetaFieldsGraphQL(cartID, \"team_name\", team_name, bearerToken);\n                        } else {\n                            team_nameData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.team_name.entityID, \"team_name\", team_name, bearerToken);\n                        }\n\n                        if(infoUpdated?.assigned_program_id.entityID != 0) {\n                            budgetData = await this.deleteMetaFieldsGraphQL(cartID, infoUpdated?.assigned_program_id.entityID, bearerToken);\n                        }\n\n                        if(infoUpdated?.program_id.entityID != 0) {\n                            program_idData = await this.deleteMetaFieldsGraphQL(cartID, infoUpdated?.program_id.entityID, bearerToken);\n                        }\n\n                        if(infoUpdated?.bottler.entityID != 0) {\n                            bottlerData = await this.deleteMetaFieldsGraphQL(cartID, infoUpdated?.bottler.entityID, bearerToken);\n                        }\n\n                        if(infoUpdated?.assigned_program_id.entityID != 0) {\n                            assigned_program_idData = await this.deleteMetaFieldsGraphQL(cartID, infoUpdated?.assigned_program_id.entityID, bearerToken);\n                        }\n\n                        if(infoUpdated?.po_number.entityID != 0) {\n                            po_numberData = await this.deleteMetaFieldsGraphQL(cartID, infoUpdated?.po_number.entityID, bearerToken);\n                        }\n\n                        if(budgetData != 0 && program_idData != 0 && bottlerData != 0 && po_numberData != 0 && assigned_program_idData != 0 && team_nameData != 0) {\n                            this.setState({customerInfoError: false});\n                            handleCustomerInfoUpdate(cartID, bearerToken);\n                        } else {\n                            this.setState({customerInfoError: true});\n                            this.setState({isLoading: false});\n                        }\n                    }\n                }\n            }\n        } else {\n            if(po_number != \"\" && budgeting.label != \"\" && program_id.label != \"\" && bottler.label != \"\" && (assigned_field_display == false || (assigned_field_display == true && assigned_program_id != \"\"))) {\n                this.setState({isLoading: true});\n\n                if(document.getElementById(\"dealerScript\")) {\n                    let scriptElem:any = document.getElementById(\"dealerScript\");\n                    const bearerToken:any = scriptElem.attributes.store_api.nodeValue;\n                    let cartID = cart?.id || \"\";\n\n                    if(bearerToken && cartID != \"\") {\n                        let budgetData:any;\n                        let program_idData:any;\n                        let bottlerData:any;\n                        let po_numberData:any;\n                        let assigned_program_idData:any;\n\n                        if(infoUpdated?.budgeting.valid == false && budgeting) {\n                            budgetData = await this.createMetaFieldsGraphQL(cartID, \"budgeting\", budgeting, bearerToken);\n                        } else {\n                            budgetData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.budgeting.entityID, \"budgeting\", budgeting, bearerToken);\n                        }\n                        if(infoUpdated?.program_id.valid == false && program_id) {\n                            program_idData = await this.createMetaFieldsGraphQL(cartID, \"program_id\", program_id, bearerToken);\n                        } else {\n                            program_idData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.program_id.entityID, \"program_id\", program_id, bearerToken);\n                        }\n                        if(infoUpdated?.bottler.valid == false && bottler) {\n                            bottlerData = await this.createMetaFieldsGraphQL(cartID, \"bottler\", bottler, bearerToken);\n                        } else {\n                            bottlerData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.bottler.entityID, \"bottler\", bottler, bearerToken);\n                        }\n                        if(infoUpdated?.po_number.valid == false && po_number) {\n                            po_numberData = await this.createMetaFieldsGraphQL(cartID, \"po_number\", po_number, bearerToken);\n                        } else {\n                            po_numberData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.po_number.entityID, \"po_number\", po_number, bearerToken);\n                        }\n\n                        if(assigned_field_display == true) {\n                            if(infoUpdated?.assigned_program_id.entityID == 0 && assigned_program_id) {\n                                assigned_program_idData = await this.createMetaFieldsGraphQL(cartID, \"assigned_program_id\", assigned_program_id, bearerToken);\n                            } else {\n                                assigned_program_idData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.assigned_program_id.entityID, \"assigned_program_id\", assigned_program_id, bearerToken);\n                            }\n                        } else {\n                            if(infoUpdated?.assigned_program_id.entityID != 0) {\n                                assigned_program_idData = await this.deleteMetaFieldsGraphQL(cartID, infoUpdated?.assigned_program_id.entityID, bearerToken);\n                            }\n                        }\n\n                        if(budgetData != 0 && program_idData != 0 && bottlerData != 0 && po_numberData != 0 && assigned_program_idData != 0) {\n                            this.setState({customerInfoError: false});\n                            handleCustomerInfoUpdate(cartID, bearerToken);\n                        } else {\n                            this.setState({customerInfoError: true});\n                            this.setState({isLoading: false});\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private deleteMetaFieldsGraphQL: (cartId: string, entityId:any, bearerToken:any ) => void = async (cartId, entityId, bearerToken) => {\n        let getOptionsQuery = `\n            mutation MyMutation {\n                cart {\n                    deleteCartMetafield(input: {cartEntityId: \"${cartId}\", metafieldEntityId: ${entityId}}) {\n                        deletedMetafieldEntityId\n                    }\n                }\n            }\n        `;          \n        await fetch('/graphql', {\n            method: 'POST',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${bearerToken}`\n            },\n            body: JSON.stringify({\n                query: getOptionsQuery\n            })\n        }).then(res => res.json()).then(res => {\n            if(res && res.data && res.data.cart && res.data.cart.deleteCartMetafield) {\n                return 1;\n            }\n        });\n    }\n    private createMetaFieldsGraphQL: (cartId: string, key: string, value: any, bearerToken:any ) => void = async (cartId, key, value, bearerToken) => {\n        let keyValue;\n        if(key == \"po_number\" || key == \"assigned_program_id\") {\n            keyValue = value;\n        } else {\n            keyValue = value.label;\n        }\n        let getOptionsQuery = `\n            mutation createCartMetafield {\n                cart {\n                    createCartMetafield(\n                    input: {cartEntityId: \"${cartId}\", data: {key: \"${key}\", value: \"${keyValue}\"}}\n                    ) {\n                        metafield {\n                            id\n                            entityId\n                            key\n                            value\n                        }\n                        errors {\n                            ... on Error {\n                            message\n                            }\n                        }\n                    }\n                }\n            }\n        `;          \n        await fetch('/graphql', {\n            method: 'POST',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${bearerToken}`\n            },\n            body: JSON.stringify({\n                query: getOptionsQuery\n            })\n        }).then(res => res.json()).then(res => {\n            if(res && res.data && res.data.cart && res.data.cart.createCartMetafield.metafield && res.data.cart.createCartMetafield.metafield.entityId) {\n                return res.data.cart.createCartMetafield.metafield.entityId;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    private updateMetaFieldsGraphQL: (cartId: string, entityID: any, key: string, value: any, bearerToken:any ) => void = async (cartId, entityID, key, value, bearerToken) => {\n        let keyValue;\n        if(key == \"po_number\" || key == \"assigned_program_id\") {\n            keyValue = value;\n        } else {\n            keyValue = value.label;\n        }\n        let getOptionsQuery = `\n            mutation updateCartMetafield {\n                cart {\n                    updateCartMetafield(\n                    input: {cartEntityId: \"${cartId}\", data: {key: \"${key}\", value: \"${keyValue}\"}, metafieldEntityId: ${entityID}}\n                    ) {\n                        metafield {\n                            id\n                            entityId\n                            key\n                            value\n                        }\n                        errors {\n                            ... on Error {\n                            message\n                            }\n                        }\n                    }\n                }\n            }\n        `;          \n        await fetch('/graphql', {\n            method: 'POST',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${bearerToken}`\n            },\n            body: JSON.stringify({\n                query: getOptionsQuery\n            })\n        }).then(res => res.json()).then(res => {\n            if(res && res.data && res.data.cart && res.data.cart.updateCartMetafield.metafield && res.data.cart.updateCartMetafield.metafield.entityId) {\n                return res.data.cart.updateCartMetafield.metafield.entityId;\n            } else {\n                return 0;\n            }\n        });\n    }\n}\n\nexport function mapToShippingProps({\n    checkoutState,\n}: CheckoutContextProps) {\n    const {\n        data: {\n            getCustomer,\n            getCart,\n            getConfig,\n        },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n\n    if (!customer || !config || !cart) {\n        return null;\n    }\n\n    return {\n        customer,\n        cart\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(CustomerInfos);\n"],"names":["props","handlesubmit","event","preventDefault","this","po_number","budgeting","program_id","bottler","assigned_program_id","assigned_field_display","infoUpdated","team_name","cart","handleCustomerInfoUpdate","state","label","setState","isLoading","document","getElementById","scriptElem","bearerToken","attributes","store_api","nodeValue","cartID","id","budgetData","program_idData","bottlerData","po_numberData","assigned_program_idData","team_nameData","valid","createMetaFieldsGraphQL","updateMetaFieldsGraphQL","entityID","deleteMetaFieldsGraphQL","customerInfoError","cartId","entityId","getOptionsQuery","fetch","method","credentials","headers","body","JSON","stringify","query","then","res","json","data","deleteCartMetafield","key","value","keyValue","createCartMetafield","metafield","updateCartMetafield","customerGrpId","componentDidMount","customer","customerGroup","render","infoData","handleInfoChange","className","onSubmit","A","type","Error","map","infoField","index","group_ids","customId","cusIndex","htmlFor","metafieldKey","classNamePrefix","placeholder","name","options","onChange","target","testId","additionalClassName","disabled","variant","Primary","Component","mapToShippingProps","getCustomer","getCart","getConfig","config","CustomerInfos"],"sourceRoot":""}